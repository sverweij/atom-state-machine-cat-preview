name: "StateGenny"
scopeName: "source.stategenny"
foldingStartMarker: "{s*$"
foldingStopMarker: "^s*}"
fileTypes: [
  "stategenny"
]
patterns: [
  {
    include: "#punctuation"
  }
  {
    include: "#comment"
  }
  {
    include: "#transitionType"
  }
  {
    include: "#attributelist"
  }
  {
    include: "#identifier"
  }
  {
    include: "#illegalalien"
  }
]
repository:
  punctuation:
    match: "(,|;)"
    name: "punctuation.separator.stategenny"
  illegalalien:
    comment: "include as last pattern to declare everything different from spaces illegal"
    match: "\\S"
    name: "invalid.illegal.stategenny"
  commentBlock:
    comment: "e.g. /* yadda */"
    begin: "/\\*"
    captures:
      "0":
        name: "punctuation.definition.comment.stategenny"
    end: "\\*/"
    name: "comment.block.stategenny"
  commentLineSlash:
    comment: "e.g. // yadda"
    begin: "(^[ \\t]+)?(?=//)"
    beginCaptures:
      "1":
        name: "punctuation.whitespace.comment.leading.stategenny"
    end: "(?!\\G)"
    patterns: [
      {
        begin: "//"
        beginCaptures:
          "0":
            name: "punctuation.definition.comment.stategenny"
        end: "\\n"
        name: "comment.line.double-slash.stategenny"
      }
    ]
  commentLineHash:
    comment: "e.g. # yadda"
    begin: "(^[ \\t]+)?(?=#)"
    beginCaptures:
      "1":
        name: "punctuation.whitespace.comment.leading.stategenny"
    end: "(?!\\G)"
    patterns: [
      {
        begin: "#"
        beginCaptures:
          "0":
            name: "punctuation.definition.comment.stategenny"
        end: "\\n"
        name: "comment.line.number-sign.stategenny"
      }
    ]
  comment:
    patterns: [
      {
        include: "#commentBlock"
      }
      {
        include: "#commentLineSlash"
      }
      {
        include: "#commentLineHash"
      }
    ]
  identifier:
    patterns: [
      {
        comment: "identifier - bare bones. In stategenny * (\"every state\") can be used as a special identifier as well"
        match: "([^;, \\\"\\t\\n\\r=\\-><:\\{\\*])+|(\\*)"
        name: "variable.identifier.stategenny"
      }
      {
        comment: "identifer - quoted. Basically a string, but we can't duplicate that"
        begin: "\""
        end: "\""
        name: "variable.identifier.stategenny"
        patterns: [
          {
            match: "\\\\."
            name: "constant.character.escape.stategenny"
          }
        ]
      }
    ]
  string:
    begin: "\""
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.stategenny"
    end: "\""
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.stategenny"
    name: "string.quoted.double.stategenny"
    patterns: [
      {
        match: "\\\\."
        name: "constant.character.escape.stategenny"
      }
    ]
  transitionType:
    patterns: [
      {
        comment: "relation - symbols"
        match: "(--|==|->|=>>|=>|>>|:>|<-|<<=|<=|<<|<:)"
        name: "storage.type.stategenny"
      }
    ]
  attributelist:
    begin: ":"
    beginCaptures:
      "0":
        name: "punctuation.attributelist.start.stategenny"
    end: "(;|,|\\{)"
    endCaptures:
      "0":
        name: "punctuation.attributelist.end.stategenny"
    patterns: [
      {
        include: "#comment"
      }
      {
        include: "#inlineblock"
      }
      {
        include: "#string"
      }
      {
        match: "[^,;\\\"\\{]+"
        name: "string"
      }
      {
        match: "\\\\."
        name: "constant.character.escape.stategenny"
      }
    ]
  inlineblock:
    begin: "\\{"
    beginCaptures:
      "0":
        name: "punctuation.definition.inlineblock.start.stategenny"
    end: "(\\})(;)"
    endCaptures:
      "1":
        name: "punctuation.definition.inlineblock.end.stategenny"
      "2":
        name: "punctuation.separator.inlineblock.end.stategenny"
    patterns: [
      {
        include: "#identifier"
      }
      {
        include: "#transitionType"
      }
      {
        include: "#inlineblock"
      }
      {
        include: "#punctuation"
      }
      {
        include: "#comment"
      }
      {
        include: "#illegalalien"
      }
    ]
